<?xml version="1.0" encoding="UTF-8"?>
<project name="TestNGTest" default="iterateTestLab" basedir="." >
	<!-- Define <testng> task -->

	<!-- global properties -->
	<import file="ant.os.xml" />

	<taskdef name="testng" classname="org.testng.TestNGAntTask">
		<classpath>
			<pathelement location="lib/testng-6.8.5.jar" />
		</classpath>
	</taskdef>
	
	<taskdef resource="net/jtools/classloadertask/antlib.xml" classpath="lib/ant-classloadertask.jar" />
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="lib/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>
	
	<tstamp>
		<format property="current.time" pattern="yyyyMMdd_HHmmss" />
		<format property="mail.time" pattern="dd MMM yyyy HH:mm:ss" />
		<format property="monthAgo" pattern="yyyyMMdd" unit="day" offset="-30" />
	</tstamp>

	<property name="src.dir" location="src" />
	<property name="lib.dir" location="lib" />
	<property name="prop.dir" location="properties" />
	
	<property name="build.dir" location="build" />
	<property name="classes.dir" location="${build.dir}/classes" />
	
	<property name="testlab.basedest.dir" value="${build.dir}/TestLab" />
	<property name="testresults.basedest.dir" value="${build.dir}/TestRunResults" />
	<property name="testresults.outdest.dir" value="${testresults.basedest.dir}/TestNGResults/TestNGResults" />
	<property name="testreport.outdest.dir" value="${testresults.basedest.dir}/TestRunReports/TestReport" />
	
	
	<property name="xsltlib" location="xsltlib" />
	<property name="browser" value="${browser}" />
	<property name="java" value="${java.version}" />
	<property file="${basedir}/properties/config.properties" prefix="property" />

	<property name="testrunbasedest.dir" value="${basedir}/Lifelens_Automation_Tests" />
	<propertyregex property="testrunoutdest.dir" input="${testrunbasedest.dir}" regexp=" " replace="_" global="true" defaultValue="${testrunbasedest.dir}" />

	<property name="indexoutdest.file" value="${testreport.outdest.dir}/index.html" />
	<propertyregex property="indexoutmail.filepath" input="${indexoutdest.file}" regexp="[\\/]" replace="\\\\" global="true" defaultValue="${indexoutdest.file}" override="true" />

	<property name="testlabbase.dir" value="${basedir}/TestLab" />
	<property name="testlabbasein.dir" value="" />
	<property name="testlaboutdest.dir" value="" />

	<property name="testLabName" value="" />
	<property name="testLabName.dir" value="" />
	<property name="testLabScripts" value="" />

	<classloader loader="project">
		<classpath>
			<pathelement path="${libdir}/activation.jar" />
			<pathelement path="${libdir}/mail.jar" />
		</classpath>
	</classloader>

	<path id="classpath.test">
		<fileset dir="${java.home}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${src.dir}" />
		<pathelement location="${classes.dir}" />
		<pathelement location="${lib.dir}" />
		<pathelement location="${testngResults}" />
		<pathelement location="${prop.dir}" />
	</path>

	<path id="classpath.xslt">
		<fileset dir="${xsltlib}">
			<include name="**/*.*" />
		</fileset>
	</path>


	<target name="clean">
		
		<echo message="property.browser set to: ${property.browser}"/>
		
		<!-- remove everything from the build dir -->
		<delete dir="${build.dir}" />
	
	</target>

	
	<target name="compile" depends="clean">
		
		<mkdir dir="${classes.dir}" />
		
		<javac srcdir="${src.dir}" debug="true" destdir="${classes.dir}" includeantruntime="false">
			<classpath refid="classpath.test" />
		</javac>
	</target>

	
	<target name="iterateTestLab" depends="compile">
		<for list="${property.testlab}" delimiter=";" param="val">
			<sequential>
				<if>
					<equals arg1="${val}" arg2="" />
					<then>
					</then>
					<else>
						<if>
							<equals arg1="${testLabName}" arg2="" />
							<then>
								<var name="testLabName" value="@{val}" />
							</then>
							<else>
								<var name="testLabName" value="${testLabName} &lt;br/&gt; @{val}" />
							</else>
						</if>

						<if>
							<equals arg1="${testLabName.dir}" arg2="" />
							<then>
								<var name="testLabName.dir" value=" @{val}" />
							</then>
							<else>
								<var name="testLabName.dir" value="${testLabName.dir}&lt;br/&gt; @{val}_${current.time}" />
							</else>
						</if>


						<var name="testlabbasein.dir" value="${testlabbase.dir}/@{val}" />

						<var name="testlabout.dir" value="${testlab.basedest.dir}/@{val}" />
						<propertyregex property="testlaboutdest.dir" input="${testlabout.dir}" regexp=" " replace="_" global="true" defaultValue="${testlabout.dir}" override="true" />

						<if>
							<equals arg1="${testLabScripts}" arg2="" />
							<then>
								<var name="testLabScripts" value="${testlaboutdest.dir}" />
							</then>
							<else>
								<var name="testLabScripts" value="${testLabScripts};${testlaboutdest.dir}" />
							</else>
						</if>

						<antcall target="copytests" />
					</else>
				</if>
			</sequential>
		</for>
		<antcall target="sendMail" />
	</target>

	
	<target name="copytests"  depends="createWorkingFolders">
		<copy todir="${testlaboutdest.dir}">
			<fileset dir="${testlabbasein.dir}">
				<include name="**/*.xlsx" />
				<include name="**/*.csv" />
				<include name="**/*.xml" />
				<exclude name="**/~*" />
			</fileset>
		</copy>
	</target>


	<target name="createWorkingFolders">
		<mkdir dir="${testlaboutdest.dir}" />
		<mkdir dir="${testlaboutdest.dir}/Screenshots" />
	</target>

	
	<target name="generatexml">
		<mkdir dir="${testresults.outdest.dir}">
		</mkdir>
		
		<java fork="true" classname="com.lifelens.automation.GenerateTestNGxml">
			<arg value="${testLabScripts}" />
			<arg value="${testresults.outdest.dir}" />
			<classpath refid="classpath.test" />
			<jvmarg value="-XX:-UseGCOverheadLimit"/>
			<jvmarg value="-Xms1024M"/>
			<jvmarg value="-Xmx1024M"/>
		</java>
	</target>

	
	<target name="run" depends="generatexml">
		
		<echo message="property.browser set to: ${property.browser}"/>
		
		<testng outputdir="${testresults.outdest.dir}" classpathref="classpath.test" failureproperty="test.failed">
			<xmlfileset dir="${testresults.outdest.dir}" includes="testng.xml" />
			<jvmarg line="-XX:-UseGCOverheadLimit"/>
			<jvmarg line="-Xms1024M"/>
			<jvmarg line="-Xmx1024M"/>
		</testng>
	</target>

	
	<target name="generateTestReport" depends="run">
		<mkdir dir="${testreport.outdest.dir}">
		</mkdir>
		
		<copy todir="${testreport.outdest.dir}">
			<fileset dir="${basedir}">
				<include name="TestReportMail.html" />
			</fileset>
		</copy>
		
		<xslt in="${testresults.outdest.dir}/testng-results.xml" style="${xsltlib}/testng-results.xsl" out="${indexoutdest.file}">
			<param expression="${testreport.outdest.dir}/" name="testNgXslt.outputDir" />
			<param expression="true" name="testNgXslt.sortTestCaseLinks" />
			<param expression="FAIL,SKIP,PASS,CONF,BY_CLASS" name="testNgXslt.testDetailsFilter" />
			<param expression="true" name="testNgXslt.showRuntimeTotals" />
			<classpath refid="classpath.xslt">
			</classpath>
		</xslt>
	</target>

	
	<target name="copytestsreport" depends="generateTestReport">
		
	</target>

	
	<target name="generateMailContent" depends="copytestsreport">
		<replaceregexp file="${testreport.outdest.dir}/TestReportMail.html" match="#TEST_LAB#" replace="${testLabName}" />
		<replaceregexp file="${testreport.outdest.dir}/TestReportMail.html" match="#RUN_TIME_STAMP#" replace="${mail.time}" />
		<replaceregexp file="${testreport.outdest.dir}/TestReportMail.html" match="#TEST_LAB_RUN_DIR#" replace="${testLabName.dir}" />
	</target>


	<target name="sendMail" depends="generateMailContent">
		
		<loadfile property="html_text" srcFile="${testreport.outdest.dir}/TestReportMail.html" />
		
		<!--mail tolist="${property.mailListTo}" from="infrastructure@vebnet.com" subject="Report for the test cases run at ${mail.time}" mailhost="10.60.65.11">
			<message mimetype="text/html">
				${html_text}
			</message>
		</mail-->
		
		
		<!-- fail the build if the tests failed - but only after we have done everything else -->
		<!--fail if="test.failed"/-->
		
	</target>
	
	<!-- run the smoke test against TRUNK env -->
	<target name="smoke-test" depends="compile">
		
		<java classname="com.lifelens.automation.TestAutomationMain" fork="true" failonerror="true">
         <arg value="./TestLab/SmokeTest/SmokeTest.xlsx"/>
			<classpath refid="classpath.test" />
       </java>

	</target>

</project>
